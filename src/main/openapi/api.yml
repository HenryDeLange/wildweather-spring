openapi: 3.1.0
info:
  title: WildWeather API
  description: "Include <code>'Authorization: Bearer &lt;jwt&gt;'</code> (when authenticated)\
    \ and <code>'Accept-Language: &lt;code&gt;'</code> in the <b>request header</b>."
  version: 1.0.0
externalDocs:
  description: Download OpenAPI YAML Specification
  url: /v3/api-docs.yaml
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
- Accept-Language: []
tags:
- name: Application Information
  description: Version information of the server.
- name: Weather
  description: Historic weather data captured by my Ambient Weather stations.
- name: Users
  description: User authentication and identity management.
- name: Admin
  description: Admin actions.
paths:
  /api/v1/users/{userId}:
    get:
      tags:
      - Users
      summary: Find User information based on the provided ID.
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserInfo"
    put:
      tags:
      - Users
      summary: Update User information based on the provided ID.
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
        required: true
      responses:
        "200":
          description: OK
  /api/v1/users/register:
    post:
      tags:
      - Users
      summary: Create a new User.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Tokens"
  /api/v1/users/refresh:
    post:
      tags:
      - Users
      summary: Refresh the User's JWT token.
      operationId: refreshUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Tokens"
  /api/v1/users/login:
    post:
      tags:
      - Users
      summary: Check the login credentials of an existing User.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Tokens"
  /api/v1/admin/process/csv:
    post:
      tags:
      - Admin
      summary: Manually trigger the processing of CSV files.
      operationId: triggerCsvProcessing
      parameters:
      - name: forceFullReload
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /api/v1/admin/process/api:
    post:
      tags:
      - Admin
      summary: Manually trigger the processing of Ambient Weather API data.
      operationId: triggerApiProcessing
      parameters:
      - name: processAllAvailable
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /api/v1/weather:
    get:
      tags:
      - Weather
      summary: "Provides all weather data, for the optional filter criteria."
      operationId: getWeather
      parameters:
      - name: station
        in: query
        required: false
        schema:
          type: string
      - name: startDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        required: false
        schema:
          type: string
          format: date
      - name: startMonth
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: endMonth
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WeatherDataDto"
  /api/v1/weather/{date}/{station}:
    get:
      tags:
      - Weather
      summary: "Provides all weather data, for the specified date at the specified\
        \ station."
      operationId: getStationWeatherOnDay
      parameters:
      - name: date
        in: path
        required: true
        schema:
          type: string
          format: date
      - name: station
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/WeatherDataDto"
  /api/v1/version/server:
    get:
      tags:
      - Application Information
      summary: Get server version and Git information.
      operationId: getServerVersion
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AppVersion"
components:
  schemas:
    UserUpdate:
      type: object
      properties:
        description:
          type: string
    UserRegister:
      type: object
      properties:
        description:
          type: string
        username:
          type: string
          maxLength: 2147483647
          minLength: 4
        password:
          type: string
          minLength: 1
      required:
      - password
      - username
    Tokens:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        accessToken:
          type: string
          minLength: 1
        refreshToken:
          type: string
          minLength: 1
      required:
      - accessToken
      - refreshToken
      - userId
    UserLogin:
      type: object
      properties:
        username:
          type: string
          maxLength: 2147483647
          minLength: 4
        password:
          type: string
          maxLength: 2147483647
          minLength: 4
      required:
      - password
      - username
    WeatherDataDto:
      type: object
      properties:
        weather:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
              additionalProperties:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: number
                    format: double
      required:
      - weather
    AppVersion:
      type: object
      properties:
        appVersion:
          type: string
          minLength: 1
        branch:
          type: string
          minLength: 1
        commitId:
          type: string
          minLength: 1
        commitTime:
          type: string
          minLength: 1
        buildTime:
          type: string
          minLength: 1
      required:
      - appVersion
      - branch
      - buildTime
      - commitId
      - commitTime
    UserInfo:
      type: object
      properties:
        description:
          type: string
        username:
          type: string
          maxLength: 2147483647
          minLength: 4
        id:
          type: integer
          format: int64
      required:
      - id
      - username
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT Access token for authentication.
      name: bearerAuth
      scheme: bearer
      bearerFormat: JWT
    Accept-Language:
      type: apiKey
      description: "Language code for responses. (EN, etc.)"
      name: Accept-Language
      in: header
